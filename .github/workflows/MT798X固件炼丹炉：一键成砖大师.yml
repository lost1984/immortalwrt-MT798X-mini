name: "MT798X固件炼丹炉：一键成砖大师"

on:
  workflow_dispatch:
    inputs:
      device:
        description: '选择要编译的机型'
        required: true
        type: choice
        options:
          - abt_asr3000
          - cetron_ct3003
          - cmcc_a10
          - cmcc_rax3000m-emmc
          - cmcc_rax3000m
          - h3c_nx30pro
          - huasifei_wh3000-emmc
          - imou_lc-hx3001
          - jcg_q30
          - konka_komi-a31
          - livinet_zr-3020
          - mt7981-360-t7-108M
          - mt7981-clt-r30b1
          - mt7981-clt-r30b1-112M
          - xiaomi_mi-router-ax3000t
          - xiaomi_mi-router-ax3000t-stock
          - xiaomi_mi-router-wr30u-112m
          - xiaomi_mi-router-wr30u-stock
          - cmcc_rax3000m-emmc-usboffload
          - cmcc_rax3000m-usboffload
        default: 'konka_komi-a31'

permissions:
  contents: write

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: 2410
  BASE_CONFIG_FILE: 2410.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 设置环境变量
        run: |
          DEVICE="${{ github.event.inputs.device }}"
          echo "DEVICE=$DEVICE" >> $GITHUB_ENV

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          for i in {1..3}; do
            sudo -E apt-get -qq update && sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
              bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
              git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
              libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
              libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
              python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
              uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zip && break
            echo "依赖安装失败，重试 $i/3..."
            sleep 5
          done
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 克隆源码
        working-directory: /workdir
        run: |
          df -hT $PWD
          for i in {1..3}; do
            git clone $REPO_URL -b $REPO_BRANCH openwrt && break
            echo "克隆失败，重试 $i/3..."
            sleep 5
          done
          if [ ! -d "openwrt" ]; then
            echo "错误：克隆源码失败"
            exit 1
          fi
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 调试：检查文件是否存在
        run: |
          ls -la $GITHUB_WORKSPACE/scripts/

      - name: 加载自定义 Feeds
        run: |
          cd openwrt
          chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: 更新 Feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a

      - name: 安装 Feeds
        run: |
          cd openwrt
          ./scripts/feeds install -a

      - name: 加载配置
        run: |
          cd openwrt
          [ -e $GITHUB_WORKSPACE/files ] && mv $GITHUB_WORKSPACE/files $GITHUB_WORKSPACE/openwrt/files
          if [ -e "$GITHUB_WORKSPACE/$BASE_CONFIG_FILE" ]; then
            cp "$GITHUB_WORKSPACE/$BASE_CONFIG_FILE" .config
          else
            echo "错误：配置文件 $BASE_CONFIG_FILE 不存在"
            exit 1
          fi
          sed -i "/CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_/d" .config
          echo "CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_$DEVICE=y" >> .config
          echo "CONFIG_TARGET_DEVICE_PACKAGES_mediatek_mt7981_DEVICE_$DEVICE=\"\"" >> .config
          make defconfig

      - name: 检查配置
        id: check_config
        run: |
          cd openwrt
          if grep -q "CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_${DEVICE}=y" .config; then
            echo "配置检查通过：目标设备 $DEVICE 已正确配置"
            echo "config_status=success" >> $GITHUB_OUTPUT
          else
            echo "错误：配置检查失败，未找到目标设备 $DEVICE 的配置"
            exit 1
          fi

      - name: 执行自定义脚本
        if: steps.check_config.outputs.config_status == 'success'
        run: |
          cd openwrt
          chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: 下载软件包
        if: steps.check_config.outputs.config_status == 'success'
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        id: compile
        if: steps.check_config.outputs.config_status == 'success'
        run: |
          cd openwrt
          df -hT
          FREE_SPACE=$(df -hT . | tail -1 | awk '{print $4}' | grep -o '[0-9]\+')
          if [ "$FREE_SPACE" -lt 10 ]; then
            echo "错误：磁盘空间不足（剩余 ${FREE_SPACE}G），需要至少 10G"
            exit 1
          fi
          echo -e "$(nproc) thread compile for $DEVICE"
          make -j$(nproc) V=s || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 检查磁盘空间使用情况
        if: steps.check_config.outputs.config_status == 'success' && !cancelled()
        run: df -hT

      - name: 整理文件并压缩为 ZIP
        id: organize
        if: steps.check_config.outputs.config_status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          FIRMWARE_DIR=$PWD
          echo "固件目录: $FIRMWARE_DIR"
          echo "FIRMWARE=$FIRMWARE_DIR" >> $GITHUB_ENV

          if ls $FIRMWARE_DIR/*sysupgrade.bin $FIRMWARE_DIR/*factory.bin >/dev/null 2>&1; then
            for bin_file in *sysupgrade.bin *factory.bin; do
              zip_filename="${bin_file%.bin}${FILE_DATE}.zip"
              zip -r "$zip_filename" "$bin_file"
              echo "已压缩为: $zip_filename"
            done
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "错误：未找到 $DEVICE 的 sysupgrade.bin 或 factory.bin 固件，退出"
            exit 1
          fi

      - name: 上传固件目录
        uses: actions/upload-artifact@v4
        if: steps.check_config.outputs.config_status == 'success' && steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware_24.10_${{ env.DEVICE }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: 清理不需要的文件
        if: steps.check_config.outputs.config_status == 'success' && steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          echo "清理 ${FIRMWARE} 目录下的 kernel.bin 和 .zip 文件..."
          find ${{ env.FIRMWARE }} -type f -name "*kernel.bin" -exec rm -v {} \;
          find ${{ env.FIRMWARE }} -type f -name "*.zip" -exec rm -v {} \;
          echo "清理完成，当前目录内容："
          ls -lh ${{ env.FIRMWARE }}

      - name: 发布固件：砖厂大师的最新杰作
        if: steps.check_config.outputs.config_status == 'success' && steps.organize.outputs.status == 'success' && !cancelled()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v24.10_${{ env.DEVICE }}_${{ env.FILE_DATE }}"
          name: "MT798X 固件 24.10 - ${{ env.DEVICE }}"
          body: |
            **MT798X 固件发布：砖厂大师的最新杰作！** 经过无数次“烧砖”实验，这款固件终于问世！ 
            - **版本**：24.10 
            - **机型**：${{ env.DEVICE }} 
            - **管理地址**：192.168.2.1 
            - **默认用户名**：root 
            - **默认密码**：空 
            - **源码来源**：https://github.com/padavanonly/immortalwrt-mt798x-24.10 
            - **内核版本**：5.4.284 
            - **感谢**：感谢 padavanonly 的开源贡献！ 
            - **特别说明**： 
              - 本发布仅包含 `sysupgrade.bin` 和 `factory.bin` 文件，`kernel.bin` 和 `.zip` 文件已移除。 
              - 如果你的路由器变砖了，别怪我，可能是它自己想退休了！ 
            - **使用建议**： 
              1. 刷机前请备份原固件，以防万一。 
              2. 使用 `sysupgrade.bin` 进行系统升级，`factory.bin` 用于恢复出厂设置。 
              3. 刷机后请检查管理地址和密码是否正确。 
              4. 如果刷机失败或变砖，请尝试恢复，或在 Issues 中反馈（附上日志）。 
            快来下载体验吧，MT798X 的“魔法”在召唤你！ 
          files: |
            ${{ env.FIRMWARE }}/*sysupgrade.bin
            ${{ env.FIRMWARE }}/*factory.bin
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传固件到私有 WebDAV
        if: steps.compile.outputs.status == 'success' && steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          # 检查 WebDAV 配置是否完整
          if [ -z "${{ secrets.WEBDAV_URL }}" ] || [ -z "${{ secrets.WEBDAV_USER }}" ] || [ -z "${{ secrets.WEBDAV_PASSWORD }}" ]; then
            echo "⚠️ WebDAV 配置不完整（缺少 WEBDAV_URL、WEBDAV_USER 或 WEBDAV_PASSWORD），跳过上传到 WebDAV"
          else
            # 如果配置完整，则执行上传
            for file in ${{ env.FIRMWARE }}/*.zip; do
              echo "上传 $file 到 WebDAV..."
              curl -u ${{ secrets.WEBDAV_USER }}:${{ secrets.WEBDAV_PASSWORD }} \
                -T "$file" \
                "${{ secrets.WEBDAV_URL }}/24.10/${{ env.DEVICE }}/$(basename $file)" || {
                  echo "⚠️ 上传 $file 失败，但将继续处理其他文件"
                }
              echo "成功上传: $file"
            done
          fi
